package peg;

import peg.encryption.Coordinate;
import peg.encryption.Encrypt;
import peg.encryption.Key;
import peg.encryption.Transformations;
import peg.text.TextConversion;

public class Testing {
    public static void main(String[] args) {
        //If test is too short and key is too long it becomes undecipherable
        String test = "ABC";
        Coordinate[] testarr = TextConversion.textIntoCoords(test);
        System.out.println(testarr[0].toRoundedString());
        String key = "BE64FA2660D240AFC7D98D35E961234097D98D081E725D69A52087A33C6C35E960976A2660D240AFC7D98D081E725D69A52087A33C6C35E960976291726186298216F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC1D1B30D03B5720D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC10D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC1D1B30D03B5720D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC1D1B30D03B5720D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC10D475E701F8DD2601F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC10D475E701F8DD26BE64FA2660D240AFC7D98D35E961234097D98D081E725D69A52087A33C6C35E960976A2660D240AFC7D98D081E725D69A52087A33C6C35E960976291726186298216F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC1D1B30D03B5720D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC10D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC1D1B30D03B5720D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC1D1B30D03B5720D475E701F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC10D475E701F8DD2601F8DD26BE64FA2660D240AFC7D98D081E725D69A52087A33C6C35E960F143DC10D475E701F8DD26";
        int[][] keyarr = Key.transformKey(key);
        Coordinate[] encrypted = Encrypt.encrypt(testarr, keyarr);
        System.out.println(encrypted[0].toRoundedString());
        Coordinate[] decrypted = Encrypt.decrypt(encrypted, keyarr);
        System.out.println(decrypted[0].toRoundedString());

    }


}